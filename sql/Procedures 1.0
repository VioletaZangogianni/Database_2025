DELIMITER //
CREATE PROCEDURE findBuyer(ticket BIGINT, OUT result BIGINT)
BEGIN
	DECLARE event_id BIGINT;
    DECLARE tckt_type VARCHAR(20);
    DECLARE potentialBuyer BIGINT;
    
    SELECT music_event_id, ticketType_type INTO event_id, tckt_type
		FROM ticket NATURAL JOIN music_event WHERE ticket_id = ticket LIMIT 1;
    
    SELECT visitor_id INTO potentialBuyer
		FROM buyer WHERE music_event_id = event_id AND ticketType_type = tckt_type AND buyer_sold = 'N' ORDER BY buyer_timeInserted LIMIT 1;
    
    IF potentialBuyer IS NOT NULL THEN
		UPDATE ticket SET visitor_id = potentialBuyer, ticket_status = 'NOT USED' WHERE ticket_id = ticket;
        UPDATE buyer SET buyer_sold = 'Y' WHERE visitor_id = potentialBuyer;
        SET result = 1;
	ELSE
		UPDATE ticket SET ticket_status = 'FOR SALE' WHERE ticket_id = ticket;
		INSERT INTO resaleQueue(ticket_id, resaleQueue_timeInserted) VALUES (ticket,  CURRENT_TIMESTAMP);
        SET result = 0;
    END IF;
    
END;
//
DELIMITER ;


DELIMITER //
CREATE PROCEDURE findTicket(buyer BIGINT, event_id BIGINT, tckt_type VARCHAR(20), OUT result BIGINT)
BEGIN
	DECLARE potentialTicket BIGINT;
    
    SELECT ticket_id INTO potentialTicket
		FROM resaleQueue NATURAL JOIN ticket NATURAL JOIN music_event
			WHERE music_event_id = event_id AND ticketType_type = tckt_type ORDER BY resaleQueue_timeInserted LIMIT 1;
    
    IF potentialTicket IS NOT NULL THEN
		UPDATE ticket SET visitor_id = buyer, ticket_status = 'NOT USED' WHERE ticket_id = potentialTicket;
        DELETE FROM resaleQueue WHERE ticket_id = potentialTicket;
        UPDATE seller SET seller_sold = 'Y' WHERE ticket_id = potentialTicket;
		SET result = 1;
	ELSE
		SET result = 0;
	END IF;
END;
//
DELIMITER ;
