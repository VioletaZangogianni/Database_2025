DELIMITER //
CREATE TRIGGER event_date BEFORE INSERT ON music_event FOR EACH ROW
BEGIN
	IF NOT EXISTS
		(SELECT * FROM festival WHERE festival_id = NEW.festival_id AND NEW.music_event_date BETWEEN festival_start_date AND festival_end_date) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Event Date Error';
	END IF;
END;
//
DELIMITER ;


DELIMITER //
CREATE TRIGGER enoughWorkers BEFORE DELETE ON worksIn FOR EACH ROW
BEGIN
    DECLARE visitors BIGINT;
    DECLARE minSecurity, minSupport BIGINT;
    
    DECLARE currentSecurity, currentSupport BIGINT;
    DECLARE staffType VARCHAR(20);
    
    SELECT COUNT(*) INTO visitors FROM performance NATURAL JOIN music_event NATURAL JOIN ticket WHERE OLD.performance_id = performance_id;
    SET minSecurity = CEILING(0.05 * visitors);
    SET minSupport = CEILING(0.02 * visitors);
    
	INSERT INTO trigger_debug_log (log_message) VALUES (CONCAT('Triggered value: ', visitors));
    
    SELECT COUNT(*) INTO currentSecurity FROM performance NATURAL JOIN worksIn NATURAL JOIN staff WHERE performance_id = OLD.performance_id AND role_staff_desc = 'Security';
    SELECT COUNT(*) INTO currentSupport FROM performance NATURAL JOIN worksIn NATURAL JOIN staff WHERE performance_id = OLD.performance_id AND role_staff_desc = 'Support';
    
    SELECT role_staff_desc INTO staffType FROM staff WHERE staff_id = OLD.staff_id;
    
    IF staffType = 'Security' AND currentSecurity - 1 < minSecurity THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Not Enough Workers';
	END IF;
    
	IF staffType = 'Support' AND currentSupport - 1 < minSupport THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Not Enough Workers';
	END IF;
END;
//
DELIMITER ;



DELIMITER //
CREATE TRIGGER checkTickets BEFORE INSERT ON ticket FOR EACH ROW
BEGIN
    DECLARE capacity BIGINT;
    SELECT stage_capacity INTO capacity FROM music_event NATURAL JOIN stage WHERE NEW.music_event_id = music_event_id LIMIT 1;
    
    IF NEW.ticket_status = 'FOR SALE' THEN
		SET NEW.ticket_status = 'NOT USED';
	END IF;
    
	IF (SELECT COUNT(*) + 1 FROM
		ticket NATURAL JOIN music_event WHERE music_event_id = NEW.music_event_id) > capacity THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Too Many Tickets';
	END IF;
    
    SET capacity = CEILING(capacity * 0.1);
	IF (SELECT COUNT(*) + 1 FROM
		ticket NATURAL JOIN music_event WHERE music_event_id = NEW.music_event_id AND ticketType_type = 'VIP') > capacity THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Too Many VIP';
	END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER isTicketForSale AFTER INSERT ON ticket FOR EACH ROW
BEGIN
    IF NEW.ticket_status = 'FOR SALE' THEN
		INSERT INTO seller(visitor_id, ticket_id) VALUES (NEW.visitor_id, NEW.ticket_id);
		INSERT INTO resaleQueue(ticket_id, resaleQueue_timeInserted) VALUES (NEW.ticket_id,  CURRENT_TIMESTAMP); 
    END IF;
END;
//
DELIMITER ;


DELIMITER //
CREATE TRIGGER valid_review BEFORE INSERT ON review FOR EACH ROW
BEGIN
	IF NOT EXISTS
		(SELECT * FROM ticket NATURAL JOIN music_event NATURAL JOIN performance
			WHERE visitor_id = NEW.visitor_id AND performance_id = NEW.performance_id AND ticket_status = 'USED') THEN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Review Error';
	END IF;
END;
//
DELIMITER ;


DELIMITER //
CREATE TRIGGER valid_seller BEFORE INSERT ON seller FOR EACH ROW
BEGIN
	IF NOT EXISTS
		(SELECT * FROM ticket WHERE ticket_id = NEW.ticket_id AND visitor_id = NEW.visitor_id AND ticket_status = 'NOT USED') THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Seller Error';
	END IF;
    
    SET NEW.seller_sold = 'N';
    
    
    CALL findBuyer(NEW.ticket_id, @result);
        
	IF @result = 1 THEN
		SET NEW.seller_sold = 'Y';
	END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER insertOnBuyer BEFORE INSERT ON buyer FOR EACH ROW
BEGIN
	SET NEW.buyer_timeInserted = CURRENT_TIMESTAMP;
    SET NEW.buyer_sold = 'N';
    
    CALL findTicket(NEW.visitor_id, NEW.music_event_id, NEW.ticketType_type, @result);
    
    IF @result = 1 THEN
		SET NEW.buyer_sold = 'Y';
    END IF;
END;
//
DELIMITER ;
