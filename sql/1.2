DROP SCHEMA IF EXISTS music_festival_ntua; 
CREATE SCHEMA music_festival_ntua;
USE music_festival_ntua;

DROP TABLE IF EXISTS location;
CREATE TABLE location (
  location_id BIGINT NOT NULL AUTO_INCREMENT,
  location_address VARCHAR(20) NOT NULL UNIQUE,
  location_coordinates VARCHAR(20) NOT NULL UNIQUE, 
  location_city VARCHAR(20) NOT NULL,
  location_country VARCHAR(20) NOT NULL,
  location_continent VARCHAR(20) CHECK (location_continent IN ('Europe', 'America', 'Asia', 'Africa', 'Oceania', 'Arctica', 'Antarctica')), 
  PRIMARY KEY(location_id)
);

DROP TABLE IF EXISTS festival;
CREATE TABLE festival (
  festival_id BIGINT NOT NULL AUTO_INCREMENT,
  festival_name VARCHAR(20) NOT NULL,
  festival_fest_year YEAR NOT NULL UNIQUE,
  location_id BIGINT NOT NULL UNIQUE,
  start_date DATE NOT NUlL UNIQUE,
  end_date DATE NOT NULL UNIQUE,
  PRIMARY KEY(festival_id),
  CONSTRAINT where_fest FOREIGN KEY (location_id) REFERENCES location(location_id),
  CONSTRAINT festival_date CHECK (start_date < end_date),
  CONSTRAINT festival_year CHECK (YEAR(start_date) = festival_fest_year AND YEAR(end_date) = festival_fest_year)
);

DROP TABLE IF EXISTS equipmentCategory;
CREATE TABLE equipmentCategory (
    category VARCHAR(20) NOT NULL UNIQUE,
    PRIMARY KEY(category)
);

DROP TABLE IF EXISTS equipment;
CREATE TABLE equipment (
  equipment_id BIGINT NOT NULL AUTO_INCREMENT,
  product VARCHAR(20) NOT NULL UNIQUE,
  category VARCHAR(20) NOT NULL,
  PRIMARY KEY(equipment_id),
  CONSTRAINT equipment_category FOREIGN KEY (category) REFERENCES equipmentCategory(category)
);

DROP TABLE IF EXISTS stage;
CREATE TABLE stage (
  stage_id BIGINT NOT NULL AUTO_INCREMENT,
  stage_name VARCHAR(40) NOT NULL,
  stage_description VARCHAR(30) NOT NULL,
  capacity BIGINT NOT NULL,
  PRIMARY KEY(id)
);

DROP TABLE IF EXISTS equipmentUsed;
CREATE TABLE equipmentUsed (
    equipment_id BIGINT NOT NULL,
    stage_id BIGINT NOT NULL,
    PRIMARY KEY(equipment_id, stageId),
    CONSTRAINT equipment_assigned FOREIGN KEY (equipment_id) REFERENCES equipment(equipment_id),
    CONSTRAINT stage_assigned FOREIGN KEY (stage_id) REFERENCES stage(stage_id)
);

DROP TABLE IF EXISTS music_event;
CREATE TABLE music_event (
  music_event_id BIGINT NOT NULL AUTO_INCREMENT,
  festival_id BIGINT NOT NULL,
  stage_id BIGINT NOT NULL,
  music_event_date DATE NOT NULL,
  music_event_time TIME NOT NULL,
  PRIMARY KEY(music_event_id),
  CONSTRAINT part_of_fest FOREIGN KEY (festival_id) REFERENCES festival(festival_id),
  CONSTRAINT takes_place_in FOREIGN KEY (stage_id) REFERENCES stage(id)
);


DROP TABLE IF EXISTS staff_levels;
CREATE TABLE staff_levels (
	lvl_id BIGINT NOT NULL,
	experience_desc VARCHAR(20) UNIQUE,
	PRIMARY KEY(lvl_id)
);

INSERT INTO staff_levels VALUES (1, "Trainee");
INSERT INTO staff_levels VALUES (2, "Beginner");
INSERT INTO staff_levels VALUES (3, "Intermediate");
INSERT INTO staff_levels VALUES (4, "Experienced");
INSERT INTO staff_levels VALUES (5, "Highly Experienced");

DROP TABLE IF EXISTS role_staff;
CREATE TABLE role_staff (
    role_id BIGINT NOT NULL,
    role_desc VARCHAR(20) UNIQUE,
    PRIMARY KEY(role_id)
);

INSERT INTO role_staff VALUES (1,'Technical');
INSERT INTO role_staff VALUES (2, 'Security');
INSERT INTO role_staff VALUES (3, 'Support');

DROP TABLE IF EXISTS staff;
CREATE TABLE staff (
  staff_id BIGINT NOT NULL AUTO_INCREMENT,
  staff_name VARCHAR(50) NOT NULL,
  staff_age SMALLINT NOT NULL,
  role_id VARCHAR(20) NOT NULL,
  lvl_id VARCHAR(20) NOT NULL,
  PRIMARY KEY(staff_id),
  CONSTRAINT lvl FOREIGN KEY (lvl_id) REFERENCES staff_levels(lvl_id),
  CONSTRAINT staffrole FOREIGN KEY (role_id) REFERENCES role_staff(role_id),
  CONSTRAINT staff_age CHECK (age > 17)
);

DROP TABLE IF EXISTS performer;
CREATE TABLE performer(
  performer_id BIGINT NOT NULL AUTO_INCREMENT,
  performer_name VARCHAR(40) NOT NULL UNIQUE,
  performer_type VARCHAR(1) NOT NULL,
  PRIMARY KEY (performer_id),
  CONSTRAINT performer_type CHECK (performer_type IN ('A', 'B')) #A for artist, B for band
);

DROP TABLE IF EXISTS genre;
CREATE TABLE genre (
	genre_id BIGINT NOT NULL AUTO_INCREMENT,
	genre_desc VARCHAR(20) NOT NULL,
    PRIMARY KEY (genre_id)
);

DROP TABLE IF EXISTS subgenre;
CREATE TABLE subgenre (
	subgenre_id BIGINT NOT NULL AUTO_INCREMENT,
	subgenre_desc VARCHAR(30) NOT NULL,
 	genre_id BIGINT NOT NULL,
    	PRIMARY KEY(subgenre_id),
     	CONSTRAINT sub FOREIGN KEY (genre_id) REFERENCES genre(genre_id)
);

DROP TABLE IF EXISTS artist;
CREATE TABLE artist(
  artist_id BIGINT NOT NULL AUTO_INCREMENT,
  artist_name VARCHAR(50) NOT NULL UNIQUE,
  nickname VARCHAR(20),
  birthdate DATE NOT NULL,
  artist_website VARCHAR(50) UNIQUE,
  artist_instagram VARCHAR(50) UNIQUE,
  artist_performer_id BIGINT NOT NULL,
  PRIMARY KEY (artist_id),
  CONSTRAINT perfartist FOREIGN KEY (artist_performer_id) REFERENCES performer(performer_id)
);

DROP TABLE IF EXISTS art2genre;
CREATE TABLE art2genre(
	artist_id BIGINT NOT NULL AUTO_INCREMENT,
 	genre_id BIGINT NOT NULL,
  	PRIMARY KEY (artist_id, genre_id),
	CONSTRAINT genre_exists FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
	CONSTRAINT art_exists FOREIGN KEY (artist_id) REFERENCES artist(artist_id)
 );	

DROP TABLE IF EXISTS band;
CREATE TABLE band(
  band_id  BIGINT NOT NULL AUTO_INCREMENT,
  band_name VARCHAR(50) NOT NULL UNIQUE,
  formation_date DATE NOT NULL,
  band_website VARCHAR(50) NOT NULL UNIQUE,
  band_instagram VARCHAR(50) NOT NULL UNIQUE,
  band_performer_id BIGINT NOT NULL,
  PRIMARY KEY (band_id),
  CONSTRAINT perfband FOREIGN KEY (band_performer_id) REFERENCES performer(performer_id)
);

DROP TABLE IF EXISTS members;
CREATE TABLE members(
  artist_id BIGINT NOT NULL,
  band_id BIGINT NOT NULL,
  position VARCHAR(20) NOT NULL,
  PRIMARY KEY (artist_id, band_id),
  CONSTRAINT band_exists FOREIGN KEY (band_id) REFERENCES band(band_id),
  CONSTRAINT dude_exists FOREIGN KEY (artist_id) REFERENCES artist(artist_id)
);

DROP TABLE IF EXISTS type_performance;
CREATE TABLE type_performance (
    performance_type_id BIGINT NOT NULL,
    performance_desc VARCHAR(20) NOT NULL,
    PRIMARY KEY (id)
);
 
 INSERT INTO type_performance VALUE (1, 'Warm-up');
 INSERT INTO type_performance VALUE (2,'Headline');
 INSERT INTO type_performance VALUE (3,'Special Guest');
    
DROP TABLE IF EXISTS performance;
CREATE TABLE performance (
  performance_id BIGINT NOT NULL AUTO_INCREMENT,
  music_event_id BIGINT NOT NULL,
  performer_id BIGINT NOT NULL,
  performance_type_id BIGINT NOT NULL,
  start_time TIME NOT NULL,
  duration SMALLINT NOT NULL,
  break SMALLINT CHECK (break BETWEEN 5 AND 30),
  staff_id BIGINT,
  PRIMARY KEY(performance_id),
  CONSTRAINT event_performed FOREIGN KEY (music_event_id) REFERENCES music_event(music_event_id),
  CONSTRAINT artist_performed FOREIGN KEY (performer_id) REFERENCES performer(performer_id),
  CONSTRAINT perf_type FOREIGN KEY (performance_type_id) REFERENCES type_performance(performance_type_id)
);

DROP TABLE IF EXISTS worksIn;
CREATE TABLE worksIn (
    staffId BIGINT NOT NULL,
    performanceId BIGINT NOT NULL,
    PRIMARY KEY(staff_id, performance_id),
    CONSTRAINT staff_assigned FOREIGN KEY (staff_id) REFERENCES staff(staff_id),
    CONSTRAINT performance_assigned FOREIGN KEY (performance_id) REFERENCES performance(performance_id)
);

DROP TABLE IF EXISTS visitor;
CREATE TABLE visitor (
  visitor_id BIGINT NOT NULL AUTO_INCREMENT,
  visitor_name VARCHAR(50) NOT NULL,
  visitor_surname VARCHAR(50) NOT NULL,
  contact_info VARCHAR(100) NOT NULL,
  visitor_age SMALLINT NOT NULL CHECK (age >= 0),
  PRIMARY KEY(visitor_id)
);

DROP TABLE IF EXISTS ticketType;
CREATE TABLE ticketType (
	ticket_type VARCHAR(20) NOT NULL,
    PRIMARY KEY(ticket_type)
);

DROP TABLE IF EXISTS ticket;
CREATE TABLE ticket (
  ticket_id BIGINT NOT NULL AUTO_INCREMENT,
  music_event_id BIGINT NOT NULL,
  visitor_id BIGINT NOT NULL,
  ticket_type VARCHAR(20) NOT NULL,
  purchase_date DATE NOT NULL,
  price FLOAT NOT NULL,
  payment_method VARCHAR(20) NOT NULL CHECK (payment_method IN('DEBIT','CREDIT','BANK_DEPOSIT')),
  EAN_13_code BIGINT NOT NULL, #AUTO_INCREMENT,
  ticket_status VARCHAR(20) NOT NULL CHECK (ticket_status IN ('USED','NOT USED')),
  PRIMARY KEY (ticket_id),
  CONSTRAINT ticket_for_which_event FOREIGN KEY (music_event_id) REFERENCES music_event(music_event_id),
  CONSTRAINT visitors_ticket FOREIGN KEY (visitor_id) REFERENCES visitor(visitor_id),
  CONSTRAINT ticket_type FOREIGN KEY (ticket_type) REFERENCES ticketType(ticket_type)
  );

  
DROP TABLE IF EXISTS review;
CREATE TABLE review (
  review_id BIGINT NOT NULL AUTO_INCREMENT,
  visitor_id BIGINT NOT NULL,
  performance_id BIGINT NOT NULL,
  interpretation SMALLINT NOT NULL,
  sound_and_lighting SMALLINT NOT NULL,
  stage_presence SMALLINT NOT NULL,
  review_organization SMALLINT NOT NULL,
  overall_impression SMALLINT NOT NULL,
  PRIMARY KEY (id),
  CONSTRAINT visitor_rating FOREIGN KEY (visitor_id) REFERENCES visitor(visitor_id),
  CONSTRAINT performance_rated FOREIGN KEY (performance_id) REFERENCES performance(performance_id),
  CONSTRAINT interpretation_score CHECK (interpretation>=1 AND interpretation<=5),
  CONSTRAINT sound_and_lighting_score CHECK (sound_and_lighting>=1 AND sound_and_lighting<=5),
  CONSTRAINT stage_presence_score CHECK (stage_presence>=1 AND stage_presence<=5),
  CONSTRAINT organization_score CHECK (review_organization>=1 AND review_organization<=5),
  CONSTRAINT overall_impression_score CHECK (overall_impression>=1 AND overall_impression<=5)
  );
