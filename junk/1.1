DROP SCHEMA IF EXISTS music_festival_ntua; 
CREATE SCHEMA music_festival_ntua;
USE music_festival_ntua;

DROP TABLE IF EXISTS festival;
CREATE TABLE festival (
  id BIGINT NOT NULL AUTO_INCREMENT,
  name VARCHAR(20) NOT NULL,
  fest_year YEAR NOT NULL,
  location_id BIGINT NOT NULL,
  start_date DATE NOT NUlL,
  end_date DATE NOT NULL,
  PRIMARY KEY(id),
  CONSTRAINT where_fest FOREIGN KEY (location_id) REFERENCES location(location_id),
  PRIMARY KEY(year) 
);

DROP TABLE IF EXISTS location;
CREATE TABLE location (
  id BIGINT NOT NULL,
  address VARCHAR(20) NOT NULL,
  coordinates VARCHAR(20) NOT NULL, 
  city VARCHAR(20) NOT NULL,
  country VARCHAR(20) NOT NULL,
  continent VARCHAR(20) CHECK (continent IN ('Europe', 'America', 'Asia', 'Africa', 'Oceania', 'Arctica', 'Antarctica')), 
  PRIMARY KEY(id)
);

DROP TABLE IF EXISTS event;
CREATE TABLE event (
  id BIGINT NOT NULL,
  festival_id BIGINT NOT NULL,
  stage_id BIGINT NOT NULL,
  event_date DATE NOT NULL,
  event_time TIME NOT NULL,
  PRIMARY KEY(id),
  CONSTRAINT part_of_fest FOREIGN KEY (festival_id) REFERENCES festival(id),
  CONSTRAINT takes_place_in FOREIGN KEY (stage_id) REFERENCES stage(id)
);

DROP TABLE IF EXISTS stage;
CREATE TABLE stage (
  id BIGINT NOT NULL,
  name VARCHAR(20) NOT NULL,
  description VARCHAR(20) NOT NULL,
  capacity SMALLINT NOT NULL,
  equipment_id BIGINT NOT NULL,
  PRIMARY KEY(id),
  CONSTRAINT equipment_used FOREIGN KEY (equipment_id) REFERENCES equipment(id)
);


DROP TABLE IF EXISTS equipment;
CREATE TABLE equipment (
  id BIGINT NOT NULL,
  product VARCHAR(20) NOT NULL,
  category VARCHAR(20) CHECK (category in ('Microphone')) 
);

DROP TABLE IF EXISTS staff_levels;
CREATE TABLE staff_levels (
	id BIGINT NOT NULL,
	experience_desc VARCHAR(20),
	PRIMARY KEY(id)
);

INSERT INTO staff_levels VALUES (1, "Trainee");
INSERT INTO staff_levels VALUES (2, "Beginner");
INSERT INTO staff_levels VALUES (3, "Intermediate");
INSERT INTO staff_levels VALUES (4, "Experienced");
INSERT INTO staff_levels VALUES (5, "Highly Experienced");

DROP TABLE IF EXISTS role_staff;
CREATE TABLE role_staff (
	id BIGINT NOT NULL,
    role_desc VARCHAR(20),
    PRIMARY KEY(id)
);

INSERT INTO role_staff VALUES (1,'Technical');
INSERT INTO role_staff VALUES (2, 'Security');
INSERT INTO role_staff VALUES (3, 'Support');

DROP TABLE IF EXISTS staff;
CREATE TABLE staff (
  staff_id BIGINT NOT NULL AUTO_INCREMENT,
  staff_name VARCHAR(50) NOT NULL,
  age SMALLINT NOT NULL,
  staff_role BIGINT,
  experience_level BIGINT,
  PRIMARY KEY(staff_id),
  CONSTRAINT lvl FOREIGN KEY (experience_level) REFERENCES staff_levels(id),
  CONSTRAINT staffrole FOREIGN KEY (staff_role) REFERENCES role_staff(id)
);

DROP TABLE IF EXISTS performance;
CREATE TABLE performance (
  id BIGINT NOT NULL AUTO_INCREMENT,
  event_id BIGINT NOT NULL,
  artist_id BIGINT NOT NULL,
  type VARCHAR(20) CHECK (type IN ('Warm-up', 'Headline', 'Special Guest')),
  start_time TIME NOT NULL,
  duration SMALLINT NOT NULL,
  break SMALLINT CHECK (break BETWEEN 5 AND 30),
  staff_id BIGINT,
  PRIMARY KEY(id),
  CONSTRAINT event_performed FOREIGN KEY (event_id) REFERENCES event(id),
  CONSTRAINT artist_performed FOREIGN KEY (artist_id) REFERENCES artist(id),
  CONSTRAINT staff_assigned FOREIGN KEY (staff_id) REFERENCES staff(id)
);

DROP TABLE IF EXISTS visitor;
CREATE TABLE visitor (
  id BIGINT NOT NULL AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  surname VARCHAR(50) NOT NULL,
  contact_info VARCHAR(100) NOT NULL,
  age SMALLINT NOT NULL CHECK (age >= 0),
  PRIMARY KEY(id)
);

DROP TABLE IF EXISTS ticket;
CREATE TABLE ticket (
  id BIGINT NOT NULL AUTO_INCREMENT,
  event_id BIGINT NOT NULL,
  visitor_id BIGINT NOT NULL,
  category VARCHAR(50) NOT NULL CHECK (type IN ('VIP', 'GENERAL', 'BACKSTAGE')),
  purchase_date DATE NOT NULL,
  price FLOAT NOT NULL,
  payment_method VARCHAR(20) NOT NULL CHECK (type IN('DEBIT','CREDIT','BANK_DEPOSIT')),
  EAN_13_code BIGINT NOT NULL AUTO_INCREMENT,
  status VARCHAR(20) NOT NULL CHECK (type IN ('USED','NOT USED')),
  PRIMARY KEY (id),
  CONSTRAINT ticket_for_which_event FOREIGN KEY (event_id) REFERENCES event(id),
  CONSTRAINT visitors_ticket FOREIGN KEY (visitor_id) REFERENCES visitor(id)
  );

  
DROP TABLE IF EXISTS review;
CREATE TABLE review (
  id BIGINT NOT NULL AUTO_INCREMENT,
  visitor_id BIGINT NOT NULL,
  performance_id BIGINT NOT NULL,
  interpretation SMALLINT NOT NULL,
  sound_and_lighting SMALLINT NOT NULL,
  stage_presence SMALLINT NOT NULL,
  organization SMALLINT NOT NULL,
  overall_impression SMALLINT NOT NULL,
  PRIMARY KEY (id),
  CONSTRAINT visitor_rating FOREIGN KEY (visitor_id) REFERENCES visitor(id),
  CONSTRAINT performance_rated FOREIGN KEY (performance_id) REFERENCES performance(id),
  CONSTRAINT interpretation_score CHECK (interpretation>=1 AND interpretation<=5),
  CONSTRAINT sound_and_lighting_score CHECK (sound_and_lighting>=1 AND sound_and_lighting<=5),
  CONSTRAINT stage_presence_score CHECK (stage_presence>=1 AND stage_presence<=5),
  CONSTRAINT organization_score CHECK (organization>=1 AND organization<=5),
  CONSTRAINT overall_impression_score CHECK (overall_impression>=1 AND overall_impression<=5)
  );
  

DROP TABLE IF EXISTS performer;
CREATE TABLE performer(
  id BIGINT NOT NULL AUTO_INCREMENT,
  name VARCHAR(20) NOT NULL,
  type VARCHAR(1) NOT NULL,
  PRIMARY KEY (id),
  CONSTRAINT performer_type CHECK (type IN ('A', 'B')) #A for artist, B for band
);

DROP TABLE IF EXISTS artist;
CREATE TABLE artist(
  id BIGINT NOT NULL AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  nickname VARCHAR(20),
  birthdate DATE NOT NULL,
  genre_id BIGINT NOT NULL,
  subgenre_id BIGINT,
  website VARCHAR(50),
  instagram VARCHAR(50),
  artist_performer_id BIGINT NOT NULL,
  PRIMARY KEY (id),
  CONSTRAINT perf FOREIGN KEY (artist_performer_id) REFERENCES performer(id)
);

DROP TABLE IF EXISTS band;
CREATE TABLE band(
  id  BIGINT NOT NULL AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  formation_date DATE NOT NULL,
  website VARCHAR(50) NOT NULL,
  instagram VARCHAR(50) NOT NULL,
  band_performer_id BIGINT NOT NULL,
  PRIMARY KEY (id),
  CONSTRAINT perf FOREIGN KEY (band_performer_id) REFERENCES performer(id)
);

DROP TABLE IF EXISTS members;
CREATE TABLE members(
  artist_id BIGINT NOT NULL,
  band_id BIGINT NOT NULL,
  position VARCHAR(20) NOT NULL,
  PRIMARY KEY (artist_id, band_id),
  CONSTRAINT band_exists FOREIGN KEY (band_id) REFERENCES band(id),
  CONSTRAINT dude_exists FOREIGN KEY (artist_id) REFERENCES artist(id)
);
